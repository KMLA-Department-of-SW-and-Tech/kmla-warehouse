Admin
GET 어드민 정보 /api/admin/:id
POST 어드민 생성 /api/admin/
PUT 어드민 업데이트 /api/admin/:id
DELETE 어드민 삭제 /api/admin/:id

Borrow-History
GET 전체 리스트 /api/borrow-history/list
GET 검색 
GET 로그 정보 /api/borrow-history/:id
POST 로그 생성 /api/borrow-history/
  body: item(String), quantity(Number), borrower(ObjectId), borrow_date(Date), return_date(Date)
DELETE 로그 삭제 /api/borrow-history/:id

PUT 물품 반납 /api/borrow-history/:id/return

Category
GET 전체 리스트 /api/category/list
POST 카테고리 생성 /api/category/
  body: name(String)
PUT 카테고리 업데이트 /api/category/:id
DELETE 카테고리 삭제 /api/category/:id

Item
GET 전체 리스트 /api/item/list
GET 검색
GET 물품 정보 /api/item/:id
POST 물품 생성 /api/item/
  body: name(String), description(String), quantity(Number), location(String)
PUT 물품 업데이트 /api/item/:id
  body: name(String), description(String), tags(Array of ObjectId), totalQuantity(Number), availableQuantity(Number), location(String), category(ObjectId), status(String)
PATCH 물품 업데이트 /api/item/:id
DELETE 물품 삭제 /api/item/:id

PUT 물품 대여 /api/item/:id/borrow
  body: quantity(Number)

Tag
GET 전체 리스트 /api/tag/list
POST 태그 생성 /api/tag/
  body: name(String)
PUT 태그 업데이트 /api/tag/:id
DELETE 팀 삭제 /api/tag/:id

Team
GET 전체 리스트 /api/team/list
GET 검색
GET 팀 정보 /api/team/:id
POST 팀 생성 /api/team/
  body: username(String), password(String), name(String)
PUT 팀 업데이트 /api/team/:id
DELETE 팀 삭제 /api/team/:id

GET 대여물품 리스트 /api/team/:id/borrow-list

Auth
GET 현재 로그인된 유저 정보 가져오기 /api/auth
POST 로그인 /auth/login
POST 로그아웃 /auth/logout

Refresh
GET 새 리프래쉬 토큰 /api/refresh


// Create Team example
Request with CURL in Windows!!
curl -X POST http://localhost:3000/api/team/ -H "Content-Type: application/json" -d "{""username"" : ""LoginTestUsername"", ""password"" : ""LoginTestPassword"", ""name"" : ""LoginTestName""}"
Request with CURL in MacOS!!
curl -X POST http://localhost:3000/api/team/ -H 'Content-Type: application/json' -d '{"username" : "LoginTestUsername", "password" : "LoginTestPassword", "name" : "LoginTestName"}'




*****Important*****
use authService or axiosPrivate for requests or you will get auth errors





Request with Axios // just an example, do not use it in this form, use async and send multiple requests at once (Promise.all)
axios.post('/api/team/', {
    username: "LoginTestUsername",
    password: "LoginTestPassword",
    name: "LoginTestName",
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });


axios.get("/api/team/list")


async {
  try {
    const response = await <Promise>;

  } catch(e) {
    console.log(e.message);
    
  }
}

<Promise>.then(response => ).error(error => )

PUT 사용 시 유의점!
각 데이터 종류에 대해 그것이 가지는 *모든* 하위 항목에 대한 정보를 줘야 함. Ex) Item 고칠거면 name, description, tags, category, location, status, availableQuantity, totalQuantity